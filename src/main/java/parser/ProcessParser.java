/* ProcessParser.java */
/* Generated By:JavaCC: Do not edit this line. ProcessParser.java */
package parser;
import java.lang.*;
import java.io.*;
import java.util.*;

public class ProcessParser implements ProcessParserConstants {
    public static void print(String path){
        try {
            Contena c = new Contena();
            System.out.println(c.getName());
            ProcessParser pp = new ProcessParser(getUD(path));
            pp.compilation_unit(c);
            System.out.println(c.getName());
        } catch (Throwable e) {
            // Catching Throwable is ugly but JavaCC throws Error objects!
            System.out.println("Syntax check failed: " + e.getMessage());
        }
    }

    private static BufferedReader getUD(String path) throws IOException{
        return new BufferedReader(new FileReader(new File(path)));
    }

  static final public void compilation_unit(Contena c) throws ParseException {List<String> functions  = new ArrayList();
    functions = function_define_statements(c);
System.out.println(functions);
  }

  static final public List<String> function_define_statements(Contena c) throws ParseException {List<String> functions = new ArrayList();
    Token name;
    String exp;
    name = jj_consume_token(IDENTIFIERS);
    jj_consume_token(EQ);
    exp = function_define_expression();
functions.add(name.image +"="+ exp);
        {if ("" != null) return functions;}
    throw new Error("Missing return statement in function");
  }

  static final public String function_define_expression() throws ParseException {List<String> str = new ArrayList();
    List<String> body = new ArrayList();
    jj_consume_token(FUNCTION);
    jj_consume_token(LC);
    str = define_parameter_list();
    jj_consume_token(RC);
    body = function_body();
{if ("" != null) return "function("+str+"){"+body+"}";}
    throw new Error("Missing return statement in function");
  }

  static final public List<String> function_body() throws ParseException {List<String> statements = new ArrayList();
    String str = "";
    jj_consume_token(LB);
    statements = statements();
System.out.println("statements : " + statements);
    jj_consume_token(RB);
{if ("" != null) return statements;}
    throw new Error("Missing return statement in function");
  }

  static final public List<String> statements() throws ParseException {List<String> strs = new ArrayList();
    String str;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIERS:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      str = statement();
      jj_consume_token(SM);
System.out.println("str : " + str);
            strs.add(str);
    }
{if ("" != null) return strs;}
    throw new Error("Missing return statement in function");
  }

  static final public String statement() throws ParseException {String varname;
    Token op;
    String data;
    varname = variable_name();
    op = jj_consume_token(EQ);
    data = data_expression();
{if ("" != null) return varname + op.image + data;}
    throw new Error("Missing return statement in function");
  }

  static final public String variable_name() throws ParseException {String t = "";
    t = matrix_expression();
{if ("" != null) return t;}
    throw new Error("Missing return statement in function");
  }

  static final public String matrix_expression() throws ParseException {Token  matrix;
    String condition ="";
    matrix = jj_consume_token(IDENTIFIERS);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LK:{
      condition = matrix_condition();
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      ;
    }
{if ("" != null) return matrix.image + condition;}
    throw new Error("Missing return statement in function");
  }

  static final public String matrix_condition() throws ParseException {List<String> cols = new ArrayList();
    List<String> rows = new ArrayList();
    String col="",row="";
    jj_consume_token(LK);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIERS:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      col = field_expression();
cols.add(col);
    }
    jj_consume_token(COM);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIERS:{
        ;
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      row = field_expression();
rows.add(row);
    }
    jj_consume_token(RK);
System.out.println("["+cols+","+rows+"]");
            {if ("" != null) return "["+cols+","+rows+"]";}
    throw new Error("Missing return statement in function");
  }

  static final public String field_expression() throws ParseException {Token arg;
    arg = jj_consume_token(IDENTIFIERS);
{if ("" != null) return arg.image;}
    throw new Error("Missing return statement in function");
  }

  static final public String data_expression() throws ParseException {Token matrixname;
    String condition="";
    matrixname = jj_consume_token(IDENTIFIERS);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LK:{
      condition = matrix_condition();
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      ;
    }
{if ("" != null) return matrixname.image+condition;}
    throw new Error("Missing return statement in function");
  }

  static final public List<String> define_parameter_list() throws ParseException {List<String> params = new ArrayList();
    String str = "";
    params = argument_list();
{if ("" != null) return params;}
    throw new Error("Missing return statement in function");
  }

  static final public List<String> argument_list() throws ParseException {List<String> args = new ArrayList();
    String arg;
    arg = argument();
args.add(arg);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COM:{
        ;
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        break label_4;
      }
      jj_consume_token(COM);
      arg = argument();
args.add(arg);
    }
{if ("" != null) return args;}
    throw new Error("Missing return statement in function");
  }

  static final public String argument() throws ParseException {Token arg;
    arg = jj_consume_token(IDENTIFIERS);
System.out.println("arg : "+arg.image);
        {if ("" != null) return arg.image;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ProcessParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[6];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x800000,0x400,0x800000,0x800000,0x400,0x8000,};
   }

  /** Constructor with InputStream. */
  public ProcessParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ProcessParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ProcessParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public ProcessParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ProcessParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public ProcessParser(ProcessParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ProcessParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[24];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 6; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 24; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
