options {
  LOOKAHEAD = 1;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  STATIC = true;
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = false;
  IGNORE_CASE = false;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = false;
}

PARSER_BEGIN(ProcessParser)

package parser;
import java.lang.*;
import java.io.*;
import java.util.*;

public class ProcessParser {
    public static void print(String path){
        try {
            Contena c = new Contena();
            System.out.print(c.getName());
            ProcessParser pp = new ProcessParser(getUD(path));
            pp.compilation_unit(c);
            System.out.print(c.getName());
        } catch (Throwable e) {
            // Catching Throwable is ugly but JavaCC throws Error objects!
            System.out.println("Syntax check failed: " + e.getMessage());
        }
    }

    private static BufferedReader getUD(String path) throws IOException{
        return new BufferedReader(new FileReader(new File(path)));
    }
}


PARSER_END(ProcessParser)
    SKIP :
{         " "
        | "\r"
        | "\t"
        | "\f"
        | "\n"
        }

void compilation_unit(Contena c):{

}{
    { c.setName("piyo");}
}

